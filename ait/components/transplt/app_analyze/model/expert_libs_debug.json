{"OpenCV": {"seqs": [{"label": "视频解码(gpu接口)", "src_seq": ["cv::cuda::setDevice(int)", "cv::cudacodec::createVideoReader(const cv::String &)", "cv::cudacodec::VideoReader::nextFrame(cv::cuda::GpuMat &,cv::cuda::Stream &)"], "seq_desc": ["视频解码"], "dst_seqs": [["MxBase::DeviceManager::GetInstance()", "MxBase::DeviceManager::SetDevice(MxBase::DeviceContext)", "MxBase::MemoryHelper::MxbsMallocAndCopy(MxBase::MemoryData &,const MxBase::MemoryData &)", "MxBase::VideoDecoder::Decode(const std::shared_ptr<uint8_t>,const uint32_t,const uint32_t,void *)"]]}, {"label": "视频解码(cpu接口)", "src_seq": ["cv::VideoCapture::open(const cv::String &,int)", "cv::VideoCapture::isOpened()", "cv::VideoCapture::grab()", "cv::VideoCapture::retrieve(cv::OutputArray,int)"], "seq_desc": ["视频解码"], "dst_seqs": [["MxBase::DeviceManager::GetInstance()", "MxBase::DeviceManager::SetDevice(MxBase::DeviceContext)", "MxBase::MemoryHelper::MxbsMallocAndCopy(MxBase::MemoryData &,const MxBase::MemoryData &)", "MxBase::VideoDecoder::Decode(const std::shared_ptr<uint8_t>,const uint32_t,const uint32_t,void *)"]]}, {"label": "视频解码(cpu接口)", "src_seq": ["cv::VideoCapture::open(const cv::String &,int)", "cv::VideoCapture::isOpened()", "cv::VideoCapture::read(cv::OutputArray)"], "seq_desc": ["视频解码"], "dst_seqs": [["MxBase::DeviceManager::GetInstance()", "MxBase::DeviceManager::SetDevice(MxBase::DeviceContext)", "MxBase::MemoryHelper::MxbsMallocAndCopy(MxBase::MemoryData &,const MxBase::MemoryData &)", "MxBase::VideoDecoder::Decode(const std::shared_ptr<uint8_t>,const uint32_t,const uint32_t,void *)"]]}, {"label": "视频解码(cpu接口)", "src_seq": ["cv::VideoCapture::get(int)", "cv::VideoCapture::isOpened()", "cv::VideoCapture::read(cv::OutputArray)"], "seq_desc": ["视频解码"], "dst_seqs": [["MxBase::DeviceManager::GetInstance()", "MxBase::DeviceManager::SetDevice(MxBase::DeviceContext)", "MxBase::MemoryHelper::MxbsMallocAndCopy(MxBase::MemoryData &,const MxBase::MemoryData &)", "MxBase::VideoDecoder::Decode(const std::shared_ptr<uint8_t>,const uint32_t,const uint32_t,void *)"]]}, {"label": "把数据从内存上传到显存和从显存下载数据(gpu接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::GpuMat::download(cv::OutputArray)"], "seq_desc": ["图片在device解码后，发回host"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::Image::ToHost()"]]}, {"label": "图片补边(gpu同步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::copyMakeBorder(cv::InputArray,cv::OutputArray,int,int,int,int,int,cv::Scalar,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行补边"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Padding(const MxBase::Image &,MxBase::Dim &,const MxBase::Color &,const MxBase::BorderType,MxBase::Image &)"]]}, {"label": "图片补边(gpu同步接口)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::copyMakeBorder(cv::InputArray,cv::OutputArray,int,int,int,int,int,cv::Scalar,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行补边"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Padding(const MxBase::Image &,MxBase::Dim &,const MxBase::Color &,const MxBase::BorderType,MxBase::Image &)"]]}, {"label": "图片补边(gpu同步接口)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int,int,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::copyMakeBorder(cv::InputArray,cv::OutputArray,int,int,int,int,int,cv::Scalar,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行补边"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Padding(const MxBase::Image &,MxBase::Dim &,const MxBase::Color &,const MxBase::BorderType,MxBase::Image &)"]]}, {"label": "图片补边(gpu异步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray,cv::cuda::Stream &)", "cv::cuda::copyMakeBorder(cv::InputArray,cv::OutputArray,int,int,int,int,int,cv::Scalar,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行补边"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Padding(const MxBase::Image &,MxBase::Dim &,const MxBase::Color &,const MxBase::BorderType,MxBase::Image &)"]]}, {"label": "图片补边(gpu异步接口)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int)", "cv::cuda::GpuMat::upload(cv::InputArray,cv::cuda::Stream &)", "cv::cuda::copyMakeBorder(cv::InputArray,cv::OutputArray,int,int,int,int,int,cv::Scalar,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行补边"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Padding(const MxBase::Image &,MxBase::Dim &,const MxBase::Color &,const MxBase::BorderType,MxBase::Image &)"]]}, {"label": "图片补边(gpu异步接口)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int,int,int)", "cv::cuda::GpuMat::upload(cv::InputArray,cv::cuda::Stream &)", "cv::cuda::copyMakeBorder(cv::InputArray,cv::OutputArray,int,int,int,int,int,cv::Scalar,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行补边"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Padding(const MxBase::Image &,MxBase::Dim &,const MxBase::Color &,const MxBase::BorderType,MxBase::Image &)"]]}, {"label": "图片补边(cpu)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::copyMakeBorder(cv::InputArray,cv::OutputArray,int,int,int,int,int,const cv::Scalar &)"], "seq_desc": ["图片解码后，进行补边"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Padding(const MxBase::Image &,MxBase::Dim &,const MxBase::Color &,const MxBase::BorderType,MxBase::Image &)"]]}, {"label": "图片补边(cpu)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int)", "cv::copyMakeBorder(cv::InputArray,cv::OutputArray,int,int,int,int,int,const cv::Scalar &)"], "seq_desc": ["图片解码后，进行补边"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Padding(const MxBase::Image &,MxBase::Dim &,const MxBase::Color &,const MxBase::BorderType,MxBase::Image &)"]]}, {"label": "图片补边(cpu)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int,int,int)", "cv::copyMakeBorder(cv::InputArray,cv::OutputArray,int,int,int,int,int,const cv::Scalar &)"], "seq_desc": ["图片解码后，进行补边"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Padding(const MxBase::Image &,MxBase::Dim &,const MxBase::Color &,const MxBase::BorderType,MxBase::Image &)"]]}, {"label": "抠图(gpu同步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)"], "seq_desc": ["图片解码后，进行抠图(同步接口),单张图片，按照固定尺寸抠出单张图片", "图片解码后，进行抠图(同步接口)，单张图片，输入一组尺寸，抠出一组图片", "图片解码后，进行抠图(同步接口)，多张图片，输入一组尺寸，抠出一组图片"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Crop(const MxBase::Image &,const MxBase::Rect &,MxBase::Image &)"], ["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Crop(const MxBase::Image &,const std::vector<MxBase::Rect> &,std::vector<MxBase::Image> &)"], ["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Crop(const std::vector<MxBase::Image> &,const std::vector<MxBase::Rect> &,std::vector<MxBase::Image> &)"]]}, {"label": "抠图(gpu同步接口)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)"], "seq_desc": ["图片解码后，进行抠图(同步接口)，多张图片，输入一组尺寸，抠出一组图片"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Crop(const std::vector<MxBase::Image> &,const std::vector<MxBase::Rect> &,std::vector<MxBase::Image> &)"]]}, {"label": "抠图(gpu同步接口)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int,int,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)"], "seq_desc": ["图片解码后，进行抠图(同步接口)，多张图片，输入一组尺寸，抠出一组图片"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Crop(const std::vector<MxBase::Image> &,const std::vector<MxBase::Rect> &,std::vector<MxBase::Image> &)"]]}, {"label": "抠图(gpu异步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray,cv::cuda::Stream &)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)"], "seq_desc": ["图片解码后，进行抠图(异步接口)，单张图片，按照固定尺寸抠出单张图片", "图片解码后，进行抠图(异步接口)，单张图片，输入一组尺寸，抠出一组图片"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::AscendStream::CreateAscendStream()", "MxBase::ImageProcessor::Crop(const MxBase::Image &,const MxBase::Rect &,MxBase::Image &,MxBase::AscendStream &)", "MxBase::AscendStream::Synchronize()", "MxBase::AscendStream::DestroyAscendStream()"], ["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::AscendStream::CreateAscendStream()", "MxBase::ImageProcessor::Crop(const MxBase::Image &,const std::vector<MxBase::Rect> &,std::vector<MxBase::Image> &,MxBase::AscendStream &)", "MxBase::AscendStream::Synchronize()", "MxBase::AscendStream::DestroyAscendStream()"]]}, {"label": "抠图和缩放(gpu同步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行抠图和缩放(同步接口)，抠出来的所有图片都缩放到同一个尺寸", "图片解码后，进行抠图和缩放(同步接口)，每个抠图对应一个缩放尺寸", "图片解码后，进行抠图和缩放(同步接口)，一批输入图片，每个图片设置单独的抠图尺寸和缩放尺寸"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::CropResize(const MxBase::Image &,const std::vector<MxBase::Rect> &,const MxBase::Size &,std::vector<MxBase::Image> &)"], ["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::CropResize(const MxBase::Image &,const std::vector<std::pair<MxBase::Rect, MxBase::Size> > &,std::vector<MxBase::Image> &)"], ["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::CropResize(const std::vector<MxBase::Image> &,const std::vector<std::pair<MxBase::Rect, MxBase::Size> > &,std::vector<MxBase::Image> &)"]]}, {"label": "抠图和缩放(gpu同步接口)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行抠图和缩放(同步接口)，一批输入图片，每个图片设置单独的抠图尺寸和缩放尺寸"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::CropResize(const std::vector<MxBase::Image> &,const std::vector<std::pair<MxBase::Rect, MxBase::Size> > &,std::vector<MxBase::Image> &)"]]}, {"label": "抠图和缩放(gpu同步接口)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int,int,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行抠图和缩放(同步接口)，一批输入图片，每个图片设置单独的抠图尺寸和缩放尺寸"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::CropResize(const std::vector<MxBase::Image> &,const std::vector<std::pair<MxBase::Rect, MxBase::Size> > &,std::vector<MxBase::Image> &)"]]}, {"label": "抠图和缩放(cpu接口)", "src_seq": ["cv::imread(const cv::String &,int)", "GpuMat()", "cv::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int)"], "seq_desc": ["图片解码后，进行抠图和缩放，抠出来的所有图片都缩放到同一个尺寸", "图片解码后，进行抠图和缩放，每个抠图对应一个缩放尺寸", "图片解码后，进行抠图和缩放，一批输入图片，每个图片设置单独的抠图尺寸和缩放尺寸"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::CropResize(const MxBase::Image &,const std::vector<MxBase::Rect> &,const MxBase::Size &,std::vector<MxBase::Image> &)"], ["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::CropResize(const MxBase::Image &,const std::vector<std::pair<MxBase::Rect, MxBase::Size> > &,std::vector<MxBase::Image> &)"], ["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::CropResize(const std::vector<MxBase::Image> &,const std::vector<std::pair<MxBase::Rect, MxBase::Size> > &,std::vector<MxBase::Image> &)"]]}, {"label": "抠图和缩放(cpu接口)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int)", "GpuMat()", "cv::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int)"], "seq_desc": ["图片解码后，进行抠图和缩放，一批输入图片，每个图片设置单独的抠图尺寸和缩放尺寸"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::CropResize(const std::vector<MxBase::Image> &,const std::vector<std::pair<MxBase::Rect, MxBase::Size> > &,std::vector<MxBase::Image> &)"]]}, {"label": "抠图和缩放(cpu接口)", "src_seq": ["cv::imreadmulti(const cv::String &,std::vector<cv::Mat> &,int,int,int)", "GpuMat()", "cv::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int)"], "seq_desc": ["图片解码后，进行抠图和缩放，一批输入图片，每个图片设置单独的抠图尺寸和缩放尺寸"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::CropResize(const std::vector<MxBase::Image> &,const std::vector<std::pair<MxBase::Rect, MxBase::Size> > &,std::vector<MxBase::Image> &)"]]}, {"label": "抠图和缩放(gpu异步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray,cv::cuda::Stream &)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行抠图和缩放(异步接口)，一批输入图片，每个图片设置单独的抠图尺寸和缩放尺寸"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::AscendStream::CreateAscendStream()", "MxBase::ImageProcessor::CropResize(const MxBase::Image &,const std::vector<MxBase::Rect> &,const MxBase::Size &,std::vector<MxBase::Image> &,MxBase::AscendStream &)", "MxBase::AscendStream::Synchronize()", "MxBase::AscendStream::DestroyAscendStream()"], ["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::AscendStream::CreateAscendStream()", "MxBase::ImageProcessor::CropResize(const MxBase::Image &,const std::vector<std::pair<MxBase::Rect, MxBase::Size> > &,std::vector<MxBase::Image> &,MxBase::AscendStream &)", "MxBase::AscendStream::Synchronize()", "MxBase::AscendStream::DestroyAscendStream()"]]}, {"label": "图片缩放(gpu同步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行缩放(同步接口)"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Resize(const MxBase::Image &,const MxBase::Size &,MxBase::Image &,const MxBase::Interpolation)"]]}, {"label": "图片缩放(gpu同步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)", "cv::cuda::GpuMat::download(cv::OutputArray)"], "seq_desc": ["图片解码后，进行缩放(同步接口)，把缩放后图片发送到host"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Resize(const MxBase::Image &,const MxBase::Size &,MxBase::Image &,const MxBase::Interpolation)", "MxBase::Image::ToHost()"]]}, {"label": "图片缩放(cpu接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int)"], "seq_desc": ["图片解码后，进行缩放"], "dst_seqs": [["MxBase::CropResize(const MxBase::Tensor &,const std::vector<MxBase::Rect> &,const std::vector<MxBase::Size> &,std::vector<MxBase::Tensor> &,const MxBase::Interpolation,bool,MxBase::AscendStream &)", "MxBase::Image::GetFormat()", "MxBase::ImageProcessor::ConvertFormat(const MxBase::Image &,const MxBase::ImageFormat,MxBase::Image &)", "MxBase::Image::GetDataSize()", "MxBase::VideoEncoder::Encode(const MxBase::Image &,const uint32_t,void *)"]]}, {"label": "图片缩放(gpu异步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray,cv::cuda::Stream &)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行缩放(异步接口)"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::AscendStream::CreateAscendStream()", "MxBase::ImageProcessor::Resize(const MxBase::Image &,const MxBase::Size &,MxBase::Image &,const MxBase::Interpolation,MxBase::AscendStream &)", "MxBase::AscendStream::Synchronize()", "MxBase::AscendStream::DestroyAscendStream()"]]}, {"label": "图片缩放，抠图和贴图(gpu同步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)", "cv::cuda::GpuMat::copyTo(cv::OutputArray)"], "seq_desc": ["图片解码后，进行缩放，抠图和贴图(同步接口)"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Resize(const MxBase::Image &,const MxBase::Size &,MxBase::Image &,const MxBase::Interpolation)", "MxBase::ImageProcessor::CropAndPaste(const MxBase::Image &,const std::pair<MxBase::Rect, MxBase::Rect> &,MxBase::Image &)"]]}, {"label": "图片缩放，抠图和贴图(gpu同步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)", "cv::cuda::GpuMat::copyTo(cv::OutputArray,cv::InputArray)"], "seq_desc": ["图片解码后，进行缩放，抠图和贴图(同步接口)"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::Resize(const MxBase::Image &,const MxBase::Size &,MxBase::Image &,const MxBase::Interpolation)", "MxBase::ImageProcessor::CropAndPaste(const MxBase::Image &,const std::pair<MxBase::Rect, MxBase::Rect> &,MxBase::Image &)"]]}, {"label": "图片缩放，抠图和贴图(gpu异步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray,cv::cuda::Stream &)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)", "cv::cuda::GpuMat::copyTo(cv::OutputArray,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行缩放，抠图和贴图(异步接口)"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::AscendStream::CreateAscendStream()", "MxBase::ImageProcessor::Resize(const MxBase::Image &,const MxBase::Size &,MxBase::Image &,const MxBase::Interpolation,MxBase::AscendStream &)", "MxBase::ImageProcessor::CropAndPaste(const MxBase::Image &,const std::pair<MxBase::Rect, MxBase::Rect> &,MxBase::Image &,MxBase::AscendStream &)", "MxBase::AscendStream::Synchronize()", "MxBase::AscendStream::DestroyAscendStream()"]]}, {"label": "图片缩放，抠图和贴图(gpu异步接口)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray,cv::cuda::Stream &)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)", "cv::cuda::GpuMat::copyTo(cv::OutputArray,cv::InputArray,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行缩放，抠图和贴图(异步接口)"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::AscendStream::CreateAscendStream()", "MxBase::ImageProcessor::Resize(const MxBase::Image &,const MxBase::Size &,MxBase::Image &,const MxBase::Interpolation,MxBase::AscendStream &)", "MxBase::ImageProcessor::CropAndPaste(const MxBase::Image &,const std::pair<MxBase::Rect, MxBase::Rect> &,MxBase::Image &,MxBase::AscendStream &)", "MxBase::AscendStream::Synchronize()", "MxBase::AscendStream::DestroyAscendStream()"]]}, {"label": "图片缩放，抠图和贴图", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray,cv::cuda::Stream &)", "cv::cuda::resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int,cv::cuda::Stream &)", "cv::cuda::GpuMat::GpuMat(const cv::cuda::GpuMat &,cv::Rect)", "cv::cuda::GpuMat::copyTo(cv::OutputArray,cv::InputArray,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行缩放，抠图和贴图(yi步接口)"], "dst_seqs": [["MxBase::CropResize(const MxBase::Tensor &,const std::vector<MxBase::Rect> &,const std::vector<MxBase::Size> &,std::vector<MxBase::Tensor> &,const MxBase::Interpolation,bool,MxBase::AscendStream &)", "MxBase::Image::GetFormat()", "MxBase::ImageProcessor::CropAndPaste(const MxBase::Image &,const std::pair<MxBase::Rect, MxBase::Rect> &,MxBase::Image &)", "MxBase::Image::SetImageAlignedSize(const MxBase::Size)", "MxBase::Image::GetDataSize()", "MxBase::VideoEncoder::Encode(const MxBase::Image &,const uint32_t,void *)"]]}, {"label": "图片色域转换(gpu)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cuda::GpuMat::upload(cv::InputArray)", "cv::cuda::cvtColor(cv::InputArray,cv::OutputArray,int,int,cv::cuda::Stream &)"], "seq_desc": ["图片解码后，进行格式转换"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::ConvertFormat(const MxBase::Image &,const MxBase::ImageFormat,MxBase::Image &)"]]}, {"label": "图片色域转换(cpu)", "src_seq": ["cv::imread(const cv::String &,int)", "cv::cvtColor(cv::InputArray,cv::OutputArray,int,int)"], "seq_desc": ["图片解码后，进行格式转换"], "dst_seqs": [["MxBase::MxInit()", "MxBase::ImageProcessor::Decode(const std::string,MxBase::Image &,const MxBase::ImageFormat)", "MxBase::ImageProcessor::ConvertFormat(const MxBase::Image &,const MxBase::ImageFormat,MxBase::Image &)"]]}, {"label": "host端创建tensor并上传device", "src_seq": ["cv::cuda::GpuMatND::create(cv::cuda::GpuMatND::SizeArray,int)", "cv::cuda::GpuMatND::upload(cv::InputArray)"], "seq_desc": ["host创建一个tensor，发送到device"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Tensor::ToDevice(int32_t)"]]}, {"label": "host端创建tensor,上传device,复制后，发回host", "src_seq": ["cv::cuda::GpuMatND::upload(cv::InputArray,cv::cuda::Stream &)", "cv::cuda::GpuMatND::clone(cv::cuda::Stream &)", "cv::cuda::GpuMatND::download(cv::OutputArray,cv::cuda::Stream &)"], "seq_desc": ["发送tensor到device，在device上对tensor进行复制后，发回host"], "dst_seqs": [["MxBase::Tensor::ToDevice(int32_t)", "MxBase::Tensor::Clone(MxBase::AscendStream &)", "MxBase::AscendStream::Synchronize()", "MxBase::Tensor::ToHost()", "MxBase::AscendStream::DestroyAscendStream()"]]}, {"label": "数据在host和device之间进行数据发送", "src_seq": ["cv::cuda::GpuMatND::upload(cv::InputArray)", "cv::cuda::GpuMatND::download(cv::OutputArray)"], "seq_desc": ["给tensor分配buffer，在host和device之间进行数据发送", "给tensor分配buffer，在不同类型device之间进行数据发送"], "dst_seqs": [["MxBase::TensorBuffer::TensorBufferMalloc(MxBase::TensorBuffer &)", "MxBase::TensorBuffer::CopyBetweenHostDevice(MxBase::TensorBuffer &,const MxBase::TensorBuffer &)"], ["MxBase::TensorBuffer::TensorBufferMalloc(MxBase::TensorBuffer &)", "MxBase::TensorBuffer::CopyBetweenDiffDevice(MxBase::TensorBuffer &,const MxBase::TensorBuffer &)"]]}, {"label": "tensor创建和释放", "src_seq": ["cv::cuda::GpuMatND::create(cv::cuda::GpuMatND::SizeArray,int)", "cv::cuda::GpuMatND::release()"], "seq_desc": ["创建一个tensor，并进行释放"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Tensor::TensorFree(MxBase::Tensor &)"]]}, {"label": "获取tensor的shape，数据类型和device id", "src_seq": ["cv::cuda::GpuMatND::size", "cv::cuda::GpuMatND::type()", "cv::cuda::getDevice()"], "seq_desc": ["获取tensor的shape，数据类型和device id"], "dst_seqs": [["MxBase::Tensor::GetShape()", "MxBase::Tensor::GetDataType()", "MxBase::Tensor::GetDeviceId()"]]}, {"label": "创建一个tensor，获取tensor数据", "src_seq": ["cv::cuda::GpuMatND::create(cv::cuda::GpuMatND::SizeArray,int)", "cv::cuda::GpuMatND::getDevicePtr()"], "seq_desc": ["创建一个tensor，获取tensor数据"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Tensor::GetData()"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载caffe模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromCaffe(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载Darknet模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromDarknet(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载onnx模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromONNX(const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载tensorflow模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTensorflow(const cv::String &,const cv::String &)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImage(cv::InputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImage(cv::InputArray,cv::OutputArray,double,const cv::Size &,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const cv::String &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(cv::OutputArrayOfArrays,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}, {"label": "加载torch模型，设置输入，进行模型推理", "src_seq": ["cv::dnn::readNetFromTorch(const cv::String &,bool,bool)", "cv::dnn::blobFromImages(cv::InputArrayOfArrays,cv::OutputArray,double,cv::Size,const cv::Scalar &,bool,bool,int)", "cv::dnn::Net::setInput(cv::InputArray,const cv::String &,double,const cv::Scalar &)", "cv::dnn::Net::forward(std::vector<std::vector<cv::Mat>> &,const std::vector<cv::String> &)"], "seq_desc": ["给tensor分配空间，进行模型推理"], "dst_seqs": [["MxBase::Tensor::TensorMalloc(MxBase::Tensor &)", "MxBase::Model::Infer(std::vector<MxBase::Tensor> &,std::vector<MxBase::Tensor> &,MxBase::AscendStream &)"]]}]}}