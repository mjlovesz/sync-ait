2023-07-09 23:53:41,301 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/delaunay2.cpp
2023-07-09 23:53:55,470 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 14.169597148895264s
2023-07-09 23:53:55,470 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:53:55,470 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.has(const cv::String &)-->cv::Rect.size-->Scalar.all(double)-->imshow(const cv::String &,cv::InputArray)-->cv::Subdiv2D.locate(cv::Point2f,int &,int &)-->cv::Subdiv2D.edgeOrg(int,cv::Point2f *)-->cv::Subdiv2D.edgeDst(int,cv::Point2f *)-->line(cv::InputOutputArray,cv::Point,cv::Point,const cv::Scalar &,int,int,int)-->cv::Subdiv2D.getEdge(int,int)-->circle(cv::InputOutputArray,cv::Point,int,const cv::Scalar &,int,int,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)-->cv::Subdiv2D.insert(cv::Point2f)-->Scalar.all(double)-->cv::Subdiv2D.getTriangleList(std::vector<Vec6f> &)-->cvRound(float)-->line(cv::InputOutputArray,cv::Point,cv::Point,const cv::Scalar &,int,int,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)-->Scalar.all(double)-->cv::Subdiv2D.getVoronoiFacetList(const std::vector<int> &,std::vector<std::vector<Point2f> > &,std::vector<Point2f> &)-->fillConvexPoly(cv::InputOutputArray,cv::InputArray,const cv::Scalar &,int,int)-->polylines(cv::InputOutputArray,cv::InputArrayOfArrays,bool,const cv::Scalar &,int,int,int)-->circle(cv::InputOutputArray,cv::Point,int,const cv::Scalar &,int,int,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:53:55,471 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/edge.cpp
2023-07-09 23:54:11,610 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.139227151870728s
2023-07-09 23:54:11,610 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:54:11,610 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.get(int)-->findFile(const cv::String &)-->imread(const cv::String &,int)-->cv::Mat.empty-->cv::Mat.type-->cv::Mat.create(cv::Size,int)-->cvtColor(cv::InputArray,cv::OutputArray,int)-->namedWindow(const cv::String &,int)-->createTrackbar(const cv::String &,const cv::String &,int *,int,cv::TrackbarCallback)-->blur(cv::InputArray,cv::OutputArray,cv::Size)-->Canny(cv::InputArray,cv::OutputArray,double,double,int)-->Scalar.all(double)-->cv::Mat.copyTo(cv::OutputArray,cv::InputArray)-->imshow(const cv::String &,cv::InputArray)-->Scharr(cv::InputArray,cv::OutputArray,int,int,int)-->Canny(cv::InputArray,cv::InputArray,cv::OutputArray,double,double)-->Scalar.all(double)-->cv::Mat.copyTo(cv::OutputArray,cv::InputArray)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:54:11,610 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/convexhull.cpp
2023-07-09 23:54:27,919 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.308576345443726s
2023-07-09 23:54:27,919 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:54:27,919 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.has(const cv::String &)-->theRNG-->cv::RNG.uniform(int,int)-->convexHull(cv::InputArray,cv::OutputArray,bool)-->Scalar.all(double)-->circle(cv::InputOutputArray,cv::Point,int,const cv::Scalar &,int,int)-->polylines(cv::InputOutputArray,cv::InputArrayOfArrays,bool,const cv::Scalar &,int,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey
2023-07-09 23:54:27,920 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/imagelist_reader.cpp
2023-07-09 23:54:43,384 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 15.464442729949951s
2023-07-09 23:54:43,384 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:54:43,384 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.get(const cv::String &)-->cv::FileStorage.isOpened-->cv::FileStorage.getFirstTopLevelNode-->cv::FileNode.type-->cv::FileNode.begin-->cv::FileNode.end-->namedWindow(const cv::String &,int)-->imread(const cv::String &,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey
2023-07-09 23:54:43,384 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/digits_lenet.cpp
2023-07-09 23:55:00,644 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 17.260040998458862s
2023-07-09 23:55:00,645 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:55:00,645 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.printMessage-->cv::CommandLineParser.get(const cv::String &)-->readNet(const cv::String &,const cv::String &)-->cv::Exception.what-->namedWindow(const cv::String &,int)-->cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.get(const cv::String &)-->cv::VideoCapture.open(const cv::String &)-->cv::CommandLineParser.get(const cv::String &)-->cv::VideoCapture.open(int)-->waitKey(int)-->cv::Mat.empty-->waitKey-->cv::TickMeter.reset-->cv::TickMeter.start-->cv::Mat.clone-->cvtColor(cv::InputArray,cv::OutputArray,int)-->GaussianBlur(cv::InputArray,cv::OutputArray,cv::Size,double,double)-->adaptiveThreshold(cv::InputArray,cv::OutputArray,double,int,int,int,double)-->bitwise_not(cv::InputArray,cv::OutputArray)-->getStructuringElement(int,cv::Size,cv::Point)-->dilate(cv::InputArray,cv::OutputArray,cv::InputArray,cv::Point,int)-->connectedComponentsWithStats(cv::InputArray,cv::OutputArray,cv::OutputArray,cv::OutputArray)-->cv::Rect.empty-->blobFromImage(cv::InputArray,double,const cv::Size &)-->cv::dnn::dnn4_v20211004::Net.setInput(cv::InputArray)-->cv::dnn::dnn4_v20211004::Net.forward-->cv::Mat.reshape(int,int)-->minMaxLoc(cv::InputArray,double *,double *,cv::Point *,cv::Point *)-->rectangle(cv::InputOutputArray,cv::Rect,const cv::Scalar &,int)-->cv::Rect.br-->putText(cv::InputOutputArray,const cv::String &,cv::Point,int,double,cv::Scalar,int)-->cv::TickMeter.stop-->cv::TickMeter.getTimeSec-->format(const char *)-->putText(cv::InputOutputArray,const cv::String &,cv::Point,int,double,cv::Scalar)-->imshow(const cv::String &,cv::InputArray)
2023-07-09 23:55:00,645 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/dis_opticalflow.cpp
2023-07-09 23:55:17,077 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.432387351989746s
2023-07-09 23:55:17,078 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:55:17,078 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.get(const cv::String &)-->findFileOrKeep(const cv::String &)-->cv::VideoCapture.open(const cv::String &)-->cv::VideoCapture.isOpened-->cv::CommandLineParser.printMessage-->DISOpticalFlow.create(int)-->cv::Mat.empty-->cvtColor(cv::InputArray,cv::OutputArray,int)-->cv::Mat.empty-->cv::DenseOpticalFlow.calc(cv::InputArray,cv::InputArray,cv::InputOutputArray)-->split(const cv::Mat &,cv::Mat *)-->multiply(cv::InputArray,cv::InputArray,cv::OutputArray)-->cartToPolar(cv::InputArray,cv::InputArray,cv::OutputArray,cv::OutputArray,bool)-->normalize(cv::InputArray,cv::InputOutputArray,double,double,int)-->cv::Mat.type-->Mat.ones(cv::Size,int)-->merge(const cv::Mat *,size_t,cv::OutputArray)-->cvtColor(cv::InputArray,cv::OutputArray,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:55:17,078 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/lsd_lines.cpp
2023-07-09 23:55:32,821 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 15.74335241317749s
2023-07-09 23:55:32,822 - INFO - seq_handler.py[61] - After clean seqs, the api seq is: 
2023-07-09 23:55:32,822 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.get(const cv::String &)-->cv::CommandLineParser.printMessage-->cv::CommandLineParser.get(const cv::String &)-->findFile(const cv::String &)-->cv::CommandLineParser.get(const cv::String &)-->imread(const cv::String &,int)-->cv::Mat.empty-->imshow(const cv::String &,cv::InputArray)-->Canny(cv::InputArray,cv::OutputArray,double,double,int)-->createLineSegmentDetector(int)-->getTickCount-->cv::LineSegmentDetector.detect(cv::InputArray,cv::OutputArray)-->getTickCount-->getTickFrequency-->cv::LineSegmentDetector.drawSegments(cv::InputOutputArray,cv::InputArray)-->imshow(const cv::String &,cv::InputArray)-->waitKey
2023-07-09 23:55:32,822 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/laplace.cpp
2023-07-09 23:55:49,206 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.384061098098755s
2023-07-09 23:55:49,206 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:55:49,214 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.get(const cv::String &)-->cv::VideoCapture.open(int)-->findFileOrKeep(const cv::String &)-->cv::VideoCapture.open(const cv::String &)-->cv::VideoCapture.isOpened-->cv::CommandLineParser.get(const cv::String &)-->cv::VideoCapture.get(int)-->cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.get(const cv::String &)-->cv::CommandLineParser.check-->cv::CommandLineParser.printErrors-->cv::VideoCapture.set(int,double)-->namedWindow(const cv::String &,int)-->createTrackbar(const cv::String &,const cv::String &,int *,int,cv::TrackbarCallback)-->cv::Mat.empty-->GaussianBlur(cv::InputArray,cv::OutputArray,cv::Size,double,double)-->blur(cv::InputArray,cv::OutputArray,cv::Size)-->medianBlur(cv::InputArray,cv::OutputArray,int)-->Laplacian(cv::InputArray,cv::OutputArray,int,int)-->convertScaleAbs(cv::InputArray,cv::OutputArray,double)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:55:49,214 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/videocapture_camera.cpp
2023-07-09 23:56:04,966 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 15.752563238143921s
2023-07-09 23:56:04,967 - INFO - seq_handler.py[61] - After clean seqs, the api seq is: 
2023-07-09 23:56:04,967 - INFO - seq_desc.py[77] - Entry Function is: main
cv::VideoCapture.isOpened-->cv::VideoCapture.get(int)-->getTickCount-->cv::Mat.empty-->getTickCount-->format(const char *)-->getTickFrequency-->format(const char *)-->getTickFrequency-->format(const char *)-->getTickFrequency-->format(const char *)-->imshow(const cv::String &,cv::InputArray)-->getTickCount-->Canny(cv::InputArray,cv::OutputArray,double,double,int)-->getTickCount-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:56:04,967 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/peopledetect.cpp
2023-07-09 23:56:21,648 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.68130111694336s
2023-07-09 23:56:21,648 - INFO - seq_handler.py[61] - After clean seqs, the api seq is: 
2023-07-09 23:56:21,648 - INFO - seq_desc.py[77] - Entry Function is: Detector.Detector
HOGDescriptor.getDefaultPeopleDetector-->cv::HOGDescriptor.setSVMDetector(cv::InputArray)-->HOGDescriptor.getDaimlerPeopleDetector-->cv::HOGDescriptor.setSVMDetector(cv::InputArray)
2023-07-09 23:56:21,648 - INFO - seq_handler.py[61] - After clean seqs, the api seq is: 
2023-07-09 23:56:21,648 - INFO - seq_desc.py[77] - Entry Function is: detect.detect
cv::HOGDescriptor.detectMultiScale(cv::InputArray,std::vector<Rect> &,double,cv::Size,cv::Size,double,double,bool)
2023-07-09 23:56:21,649 - INFO - seq_handler.py[61] - After clean seqs, the api seq is: 
2023-07-09 23:56:21,649 - INFO - seq_desc.py[77] - Entry Function is: adjustRect.adjustRect
cvRound(double)
2023-07-09 23:56:21,649 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:56:21,649 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.about(const cv::String &)-->cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.printMessage-->cv::CommandLineParser.get(const cv::String &)-->cv::CommandLineParser.check-->cv::CommandLineParser.printErrors-->cv::VideoCapture.open(int)-->findFileOrKeep(const cv::String &)-->cv::VideoCapture.open(const cv::String &)-->cv::VideoCapture.isOpened-->cv::Mat.empty-->getTickCount-->getTickFrequency-->putText(cv::InputOutputArray,const cv::String &,cv::Point,int,double,cv::Scalar,int,int)-->cv::Rect.tl-->cv::Rect.br-->rectangle(cv::InputOutputArray,cv::Point,cv::Point,const cv::Scalar &,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:56:21,649 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/distrans.cpp
2023-07-09 23:56:38,343 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.694522857666016s
2023-07-09 23:56:38,344 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:56:38,344 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.get(int)-->findFile(const cv::String &)-->imread(const cv::String &,int)-->cv::Mat.empty-->namedWindow(const cv::String &,int)-->createTrackbar(const cv::String &,const cv::String &,int *,int,cv::TrackbarCallback,void *)-->distanceTransform(cv::InputArray,cv::OutputArray,int,int)-->distanceTransform(cv::InputArray,cv::OutputArray,cv::OutputArray,int,int,int)-->pow(cv::InputArray,double,cv::OutputArray)-->cv::Mat.convertTo(cv::OutputArray,int,double,double)-->Scalar.all(double)-->cv::Mat.convertTo(cv::OutputArray,int,double,double)-->Scalar.all(double)-->cv::Mat.convertTo(cv::OutputArray,int)-->merge(const cv::Mat *,size_t,cv::OutputArray)-->cv::Mat.create(cv::Size,int)-->cvRound(double)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:56:38,344 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/segment_objects.cpp
2023-07-09 23:56:54,505 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.161272287368774s
2023-07-09 23:56:54,505 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:56:54,506 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.get(const cv::String &)-->cv::VideoCapture.open(int)-->findFileOrKeep(const cv::String &)-->cv::VideoCapture.open(const cv::String &)-->cv::VideoCapture.isOpened-->cv::Mat.empty-->namedWindow(const cv::String &,int)-->createBackgroundSubtractorMOG2-->cv::BackgroundSubtractorMOG2.setVarThreshold(double)-->cv::Mat.empty-->cv::BackgroundSubtractorMOG2.apply(cv::InputArray,cv::OutputArray,double)-->dilate(cv::InputArray,cv::OutputArray,cv::InputArray,cv::Point,int)-->erode(cv::InputArray,cv::OutputArray,cv::InputArray,cv::Point,int)-->dilate(cv::InputArray,cv::OutputArray,cv::InputArray,cv::Point,int)-->findContours(cv::InputArray,cv::OutputArrayOfArrays,cv::OutputArray,int,int)-->Mat.zeros(cv::Size,int)-->contourArea(cv::InputArray)-->drawContours(cv::InputOutputArray,cv::InputArrayOfArrays,int,const cv::Scalar &,int,int,cv::InputArray)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:56:54,506 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/opencv_version.cpp
2023-07-09 23:57:10,294 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 15.788139343261719s
2023-07-09 23:57:10,294 - INFO - seq_handler.py[61] - After clean seqs, the api seq is: 
2023-07-09 23:57:10,294 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.about(const cv::String &)-->cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.printMessage-->cv::CommandLineParser.check-->cv::CommandLineParser.printErrors-->cv::CommandLineParser.has(const cv::String &)-->getBuildInformation
2023-07-09 23:57:10,294 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/videocapture_gphoto2_autofocus.cpp
2023-07-09 23:57:26,385 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.09060525894165s
2023-07-09 23:57:26,385 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:57:26,394 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.get(const cv::String &)-->cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.get(const cv::String &)-->cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.get(const cv::String &)-->cv::CommandLineParser.check-->cv::CommandLineParser.printErrors-->cv::VideoCapture.isOpened-->namedWindow(const cv::String &,int)-->cv::VideoCapture.get(int)-->cv::VideoCapture.set(int,double)-->cv::VideoCapture.get(int)-->VideoWriter.fourcc(char,char,char,char)-->cv::VideoWriter.open(const cv::String &,int,double,cv::Size,bool)-->cv::VideoWriter.isOpened-->cv::VideoCapture.set(int,double)-->cv::Mat.empty-->cvtColor(cv::InputArray,cv::OutputArray,int)-->GaussianBlur(cv::InputArray,cv::OutputArray,cv::Size,double,double)-->Canny(cv::InputArray,cv::OutputArray,double,double,int)-->cv::Mat.begin-->cv::Mat.end-->cv::VideoCapture.set(int,double)-->cvtColor(cv::InputArray,cv::OutputArray,int)-->GaussianBlur(cv::InputArray,cv::OutputArray,cv::Size,double,double)-->Canny(cv::InputArray,cv::OutputArray,double,double,int)-->cv::Mat.begin-->cv::Mat.end-->cv::VideoCapture.set(int,double)-->cv::VideoCapture.get(int)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)-->cv::VideoCapture.set(int,double)-->cv::VideoCapture.get(int)
2023-07-09 23:57:26,394 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/contours2.cpp
2023-07-09 23:57:43,138 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.743568658828735s
2023-07-09 23:57:43,138 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:57:43,139 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.has(const cv::String &)-->Mat.zeros(int,int,int)-->cvRound(double)-->line(cv::InputOutputArray,cv::Point,cv::Point,const cv::Scalar &,int,int,int)-->ellipse(cv::InputOutputArray,cv::Point,cv::Size,double,double,double,const cv::Scalar &,int,int,int)-->namedWindow(const cv::String &,int)-->imshow(const cv::String &,cv::InputArray)-->findContours(cv::InputArray,cv::OutputArrayOfArrays,cv::OutputArray,int,int)-->approxPolyDP(cv::InputArray,cv::OutputArray,double,bool)-->namedWindow(const cv::String &,int)-->createTrackbar(const cv::String &,const cv::String &,int *,int,cv::TrackbarCallback)-->Mat.zeros(int,int,int)-->drawContours(cv::InputOutputArray,cv::InputArrayOfArrays,int,const cv::Scalar &,int,int,cv::InputArray,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey
2023-07-09 23:57:43,139 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/kmeans.cpp
2023-07-09 23:57:59,472 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.332731008529663s
2023-07-09 23:57:59,472 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:57:59,472 - INFO - seq_desc.py[77] - Entry Function is: main
cv::RNG.uniform(int,int)-->cv::Mat.rowRange(int,int)-->cv::RNG.fill(cv::InputOutputArray,int,cv::InputArray,cv::InputArray)-->randShuffle(cv::InputOutputArray,double,cv::RNG *)-->kmeans(cv::InputArray,int,cv::InputOutputArray,cv::TermCriteria,int,int,cv::OutputArray)-->Scalar.all(double)-->circle(cv::InputOutputArray,cv::Point,int,const cv::Scalar &,int,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey
2023-07-09 23:57:59,472 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/kalman.cpp
2023-07-09 23:58:15,177 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 15.704343557357788s
2023-07-09 23:58:15,177 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:58:15,177 - INFO - seq_desc.py[77] - Entry Function is: main
Mat.zeros(int,int,int)-->Scalar.all(double)-->setIdentity(cv::InputOutputArray)-->Scalar.all(double)-->setIdentity(cv::InputOutputArray,const cv::Scalar &)-->Scalar.all(double)-->setIdentity(cv::InputOutputArray,const cv::Scalar &)-->Scalar.all(double)-->setIdentity(cv::InputOutputArray,const cv::Scalar &)-->Scalar.all(double)-->randn(cv::InputOutputArray,cv::InputArray,cv::InputArray)-->cv::KalmanFilter.predict-->Scalar.all(double)-->randn(cv::InputOutputArray,cv::InputArray,cv::InputArray)-->cv::KalmanFilter.correct(const cv::Mat &)-->drawMarker(cv::InputOutputArray,cv::Point,const cv::Scalar &,int,int,int)-->line(cv::InputOutputArray,cv::Point,cv::Point,const cv::Scalar &,int,int,int)-->Scalar.all(double)-->randn(cv::InputOutputArray,cv::InputArray,cv::InputArray)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:58:15,177 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/text_skewness_correction.cpp
2023-07-09 23:58:31,712 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.535013675689697s
2023-07-09 23:58:31,713 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:58:31,713 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.get(const cv::String &)-->findFile(const cv::String &)-->imread(const cv::String &,int)-->cv::Mat.empty-->cv::CommandLineParser.get(const cv::String &)-->cvtColor(cv::InputArray,cv::OutputArray,int)-->threshold(cv::InputArray,cv::OutputArray,double,double,int)-->getStructuringElement(int,cv::Size,cv::Point)-->erode(cv::InputArray,cv::OutputArray,cv::InputArray)-->findNonZero(cv::InputArray,cv::OutputArray)-->minAreaRect(cv::InputArray)-->getRotationMatrix2D(cv::Point2f,double,double)-->warpAffine(cv::InputArray,cv::OutputArray,cv::InputArray,cv::Size,int,int)-->putText(cv::InputOutputArray,const cv::String &,cv::Point,int,double,cv::Scalar,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:58:31,713 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/connected_components.cpp
2023-07-09 23:58:48,299 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.585909843444824s
2023-07-09 23:58:48,299 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:58:48,299 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.about(const cv::String &)-->cv::CommandLineParser.printMessage-->cv::CommandLineParser.get(int)-->findFile(const cv::String &)-->imread(const cv::String &,int)-->cv::Mat.empty-->imshow(const cv::String &,cv::InputArray)-->namedWindow(const cv::String &,int)-->createTrackbar(const cv::String &,const cv::String &,int *,int,cv::TrackbarCallback)-->connectedComponents(cv::InputArray,cv::OutputArray,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:58:48,299 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/videocapture_openni.cpp
2023-07-09 23:59:04,763 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.463695287704468s
2023-07-09 23:59:04,763 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:59:04,763 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.get(const cv::String &)-->cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.get(const cv::String &)-->cv::CommandLineParser.check-->cv::CommandLineParser.printErrors-->cv::VideoCapture.open(const cv::String &)-->cv::VideoCapture.open(int)-->cv::VideoCapture.isOpened-->cv::VideoCapture.open(int)-->cv::VideoCapture.isOpened-->cv::VideoCapture.set(int,double)-->error(int,const cv::String &,const char *,const char *,int)-->cv::VideoCapture.set(int,double)-->cv::VideoCapture.get(int)-->cv::VideoCapture.grab-->cv::VideoCapture.retrieve(cv::OutputArray,int)-->cv::Mat.convertTo(cv::OutputArray,int,double)-->imshow(const cv::String &,cv::InputArray)-->cv::VideoCapture.retrieve(cv::OutputArray,int)-->cv::VideoCapture.get(int)-->cv::Mat.empty-->error(int,const cv::String &,const char *,const char *,int)-->cv::Mat.type-->error(int,const cv::String &,const char *,const char *,int)-->minMaxLoc(cv::InputArray,double *,double *)-->cv::Mat.create(cv::Size,int)-->Scalar.all(double)-->convertScaleAbs(cv::InputArray,cv::OutputArray,double)-->applyColorMap(cv::InputArray,cv::OutputArray,int)-->cv::Mat.copyTo(cv::OutputArray,cv::InputArray)-->imshow(const cv::String &,cv::InputArray)-->cv::VideoCapture.retrieve(cv::OutputArray,int)-->imshow(const cv::String &,cv::InputArray)-->cv::VideoCapture.retrieve(cv::OutputArray,int)-->imshow(const cv::String &,cv::InputArray)-->cv::VideoCapture.retrieve(cv::OutputArray,int)-->imshow(const cv::String &,cv::InputArray)-->cv::VideoCapture.retrieve(cv::OutputArray,int)-->cv::Mat.convertTo(cv::OutputArray,int,double,double)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:59:04,764 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/camshiftdemo.cpp
2023-07-09 23:59:21,190 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.426913022994995s
2023-07-09 23:59:21,191 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:59:21,191 - INFO - seq_desc.py[77] - Entry Function is: onMouse

2023-07-09 23:59:21,191 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:59:21,191 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.get(int)-->cv::VideoCapture.open(int)-->cv::VideoCapture.isOpened-->cv::CommandLineParser.printMessage-->namedWindow(const cv::String &,int)-->setMouseCallback(const cv::String &,cv::MouseCallback,void *)-->createTrackbar(const cv::String &,const cv::String &,int *,int,cv::TrackbarCallback)-->Mat.zeros(int,int,int)-->cv::Mat.empty-->cv::Mat.copyTo(cv::OutputArray)-->cvtColor(cv::InputArray,cv::OutputArray,int)-->inRange(cv::InputArray,cv::InputArray,cv::InputArray,cv::OutputArray)-->cv::Mat.depth-->cv::Mat.create(cv::Size,int)-->mixChannels(const cv::Mat *,size_t,cv::Mat *,size_t,const int *,size_t)-->calcHist(const cv::Mat *,int,const int *,cv::InputArray,cv::OutputArray,int,const int *,const float **)-->normalize(cv::InputArray,cv::InputOutputArray,double,double,int)-->Scalar.all(double)-->saturate_cast(double)-->cvtColor(cv::InputArray,cv::OutputArray,int)-->saturate_cast(float)-->rectangle(cv::InputOutputArray,cv::Point,cv::Point,const cv::Scalar &,int,int)-->calcBackProject(const cv::Mat *,int,const int *,cv::InputArray,cv::OutputArray,const float **)-->CamShift(cv::InputArray,cv::Rect &,cv::TermCriteria)-->cv::Rect.area-->cvtColor(cv::InputArray,cv::OutputArray,int)-->ellipse(cv::InputOutputArray,const cv::RotatedRect &,const cv::Scalar &,int,int)-->bitwise_not(cv::InputArray,cv::OutputArray)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)-->Scalar.all(double)-->destroyWindow(const cv::String &)-->namedWindow(const cv::String &,int)
2023-07-09 23:59:21,191 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/train_HOG.cpp
2023-07-09 23:59:38,568 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 17.376447200775146s
2023-07-09 23:59:38,568 - INFO - seq_handler.py[74] - After clean seqs, the api seq is: 
2023-07-09 23:59:38,568 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.printMessage-->cv::CommandLineParser.get(const cv::String &)-->cv::HOGDescriptor.load(const cv::String &)-->glob(cv::String,std::vector<String> &)-->cv::VideoCapture.open(int)-->cv::VideoCapture.open(const cv::String &)-->namedWindow(const cv::String &,int)-->cv::VideoCapture.isOpened-->imread(const cv::String &)-->cv::Mat.empty-->cv::HOGDescriptor.detectMultiScale(cv::InputArray,std::vector<Rect> &,std::vector<double> &)-->rectangle(cv::InputOutputArray,cv::Rect,const cv::Scalar &,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)-->cv::CommandLineParser.printMessage-->glob(cv::String,std::vector<String> &)-->imread(const cv::String &)-->cv::Mat.empty-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)-->glob(cv::String,std::vector<String> &)-->imread(const cv::String &)-->cv::Mat.empty-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)-->cv::Mat.clone-->cvtColor(cv::InputArray,cv::OutputArray,int)-->cv::HOGDescriptor.compute(cv::InputArray,std::vector<float> &,cv::Size,cv::Size)-->cv::Mat.clone-->flip(cv::InputArray,cv::OutputArray,int)-->cv::HOGDescriptor.compute(cv::InputArray,std::vector<float> &,cv::Size,cv::Size)-->cv::Mat.clone-->cvtColor(cv::InputArray,cv::OutputArray,int)-->cv::HOGDescriptor.compute(cv::InputArray,std::vector<float> &,cv::Size,cv::Size)-->cv::Mat.clone-->flip(cv::InputArray,cv::OutputArray,int)-->cv::HOGDescriptor.compute(cv::InputArray,std::vector<float> &,cv::Size,cv::Size)-->cv::Mat.clone-->error(int,const cv::String &,const char *,const char *,int)-->transpose(cv::InputArray,cv::OutputArray)-->cv::Mat.row(int)-->cv::Mat.copyTo(cv::OutputArray)-->cv::Mat.row(int)-->cv::Mat.copyTo(cv::OutputArray)-->SVM.create-->cv::ml::SVM.setCoef0(double)-->cv::ml::SVM.setDegree(double)-->cv::ml::SVM.setTermCriteria(const cv::TermCriteria &)-->cv::ml::SVM.setGamma(double)-->cv::ml::SVM.setKernel(int)-->cv::ml::SVM.setNu(double)-->cv::ml::SVM.setP(double)-->cv::ml::SVM.setC(double)-->cv::ml::SVM.setType(int)-->cv::ml::SVM.train(cv::InputArray,int,cv::InputArray)-->cv::ml::SVM.getSupportVectors-->cv::ml::SVM.getDecisionFunction(int,cv::OutputArray,cv::OutputArray)-->cv::Mat.total-->error(int,const cv::String &,const char *,const char *,int)-->cv::Mat.type-->error(int,const cv::String &,const char *,const char *,int)-->cv::Mat.type-->error(int,const cv::String &,const char *,const char *,int)-->cv::HOGDescriptor.setSVMDetector(cv::InputArray)-->cv::HOGDescriptor.detectMultiScale(cv::InputArray,std::vector<Rect> &,std::vector<double> &)-->cv::Mat.clone-->resize(cv::InputArray,cv::OutputArray,cv::Size,double,double,int)-->rectangle(cv::InputOutputArray,cv::Rect,const cv::Scalar &,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)-->cvtColor(cv::InputArray,cv::OutputArray,int)-->cv::HOGDescriptor.compute(cv::InputArray,std::vector<float> &,cv::Size,cv::Size)-->cv::Mat.clone-->flip(cv::InputArray,cv::OutputArray,int)-->cv::HOGDescriptor.compute(cv::InputArray,std::vector<float> &,cv::Size,cv::Size)-->cv::Mat.clone-->cvtColor(cv::InputArray,cv::OutputArray,int)-->cv::HOGDescriptor.compute(cv::InputArray,std::vector<float> &,cv::Size,cv::Size)-->cv::Mat.clone-->flip(cv::InputArray,cv::OutputArray,int)-->cv::HOGDescriptor.compute(cv::InputArray,std::vector<float> &,cv::Size,cv::Size)-->cv::Mat.clone-->error(int,const cv::String &,const char *,const char *,int)-->transpose(cv::InputArray,cv::OutputArray)-->cv::Mat.row(int)-->cv::Mat.copyTo(cv::OutputArray)-->cv::Mat.row(int)-->cv::Mat.copyTo(cv::OutputArray)-->cv::ml::SVM.train(cv::InputArray,int,cv::InputArray)-->cv::ml::SVM.getSupportVectors-->cv::ml::SVM.getDecisionFunction(int,cv::OutputArray,cv::OutputArray)-->cv::Mat.total-->error(int,const cv::String &,const char *,const char *,int)-->cv::Mat.type-->error(int,const cv::String &,const char *,const char *,int)-->cv::Mat.type-->error(int,const cv::String &,const char *,const char *,int)-->cv::HOGDescriptor.setSVMDetector(cv::InputArray)-->cv::HOGDescriptor.save(const cv::String &)-->cv::HOGDescriptor.load(const cv::String &)-->glob(cv::String,std::vector<String> &)-->cv::VideoCapture.open(int)-->cv::VideoCapture.open(const cv::String &)-->namedWindow(const cv::String &,int)-->cv::VideoCapture.isOpened-->imread(const cv::String &)-->cv::Mat.empty-->cv::HOGDescriptor.detectMultiScale(cv::InputArray,std::vector<Rect> &,std::vector<double> &)-->rectangle(cv::InputOutputArray,cv::Rect,const cv::Scalar &,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey(int)
2023-07-09 23:59:38,568 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/demhist.cpp
2023-07-09 23:59:54,829 - INFO - cxx_scanner.py[31] - Total time for scanning cxx files is 16.26093292236328s
2023-07-09 23:59:54,829 - INFO - seq_handler.py[61] - After clean seqs, the api seq is: 
2023-07-09 23:59:54,830 - INFO - seq_desc.py[77] - Entry Function is: main
cv::CommandLineParser.about(const cv::String &)-->cv::CommandLineParser.has(const cv::String &)-->cv::CommandLineParser.printMessage-->cv::CommandLineParser.get(int)-->findFile(const cv::String &)-->imread(const cv::String &,int)-->cv::Mat.empty-->namedWindow(const cv::String &,int)-->createTrackbar(const cv::String &,const cv::String &,int *,int,cv::TrackbarCallback)-->cv::Mat.convertTo(cv::OutputArray,int,double,double)-->imshow(const cv::String &,cv::InputArray)-->calcHist(const cv::Mat *,int,const int *,cv::InputArray,cv::OutputArray,int,const int *,const float **)-->Mat.ones(int,int,int)-->normalize(cv::InputArray,cv::InputOutputArray,double,double,int,int)-->Scalar.all(double)-->cvRound(double)-->cvRound(float)-->Scalar.all(double)-->rectangle(cv::InputOutputArray,cv::Point,cv::Point,const cv::Scalar &,int,int,int)-->imshow(const cv::String &,cv::InputArray)-->waitKey
2023-07-09 23:59:54,830 - INFO - clang_parser.py[359] - Scanning file: /home/liuzhe/package/opencv-4.5.4/samples/cpp/letter_recog.cpp
