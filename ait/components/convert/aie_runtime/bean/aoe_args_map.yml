aoe_args: [
  {
    name: '--model',
    abbr_name: '-m',
    desc: 'Model file',
    is_required: True,
  },
  {
    name: '--weight',
    abbr_name: '-w',
    desc: 'Weight file. Required when framework is Caffe',
  },
    {
        name: "--framework",
        abbr_name: '-f',
        desc: "Framework type (Caffe: 0, MindSpore: 1, Tensorflow: 3, Onnx: 5).\n
        Framework will be automatically identified by the suffix of the model file if not set.",
    },
    {
      name: '--model_path',
      desc: "Model file path.",
    },
    {
        name: '--singleop',
        desc: "Single op definition file."
    },
    {
        name: '--ip',
        desc: "Ncs server ip.",
    },
    {
        name: '--port',
        desc: "Ncs server port. The value range is [6000-10000].\n The default value is 8000.",
    },
    {
        name: '--input_format',
        desc: 'Format of input data. E.g.: "NCHW"'
    },
    {
        name: '--input_shape',
        desc: "Shape of input data. Separate multiple nodes with semicolons (;).\n
        Use double quotation marks (\") to enclose each argument.\n
        E.g.: \"input_name1:n1,c1,h1,w1;input_name2:n2,c2,h2,w2\"",
    },
    {
        name: '--dynamic_batch_size',
        desc: 'Set dynamic batch size. E.g.: "batchsize1,batchsize2,batchsize3"',
    },
    {
        name: '--dynamic_image_size',
        desc: "Set dynamic image size. Separate multiple nodes with semicolons (;). Use double quotation marks (\") to enclose each argument.\n
        E.g.: \"imagesize1_height,imagesize1_width;imagesize2_height,imagesize2_width\"",
    },
    {
        name: '--dynamic_dims',
        desc: "Set dynamic dims. Separate multiple nodes with semicolons (;). Use double quotation marks (\") to enclose each argument.\n
        E.g.: \"dims1_n1,dims1_n2;dims2_n1,dims2_n2\"",
    },
    {
        name: '--reload',
        desc: "Recover from interrupt",
    },
    {
      name: '--job_type',
      abbr_name: '-j',
      desc: "Job type (sgat: 1, opat: 2, )",
    },
  {
    name: '--progress_bar',
    desc: "Display progress or not. on(default): dispaly progress, off: not display progress",
  },
  {
    name: '--device',
    desc: "Specify device by id",
  },
  {
    name: '--tune_optimization_level',
    desc: "Tune optimization level. The value range is [O1, O2]. O1 means deeper optimization, O2 means default optimization.",
  },
    {
        name: '--output',
        desc: "Output file path&name(needn't suffix, will add .om automatically).",
    },
    {
        name: '--output_type',
        desc: "Set net output type. Support FP32, FP16, UINT8, INT8. E.g.: FP16, indicates that all out nodes are set to FP16.\n
        \"node1:0:FP16;node2:1:FP32\", indicates setting the datatype of multiple out nodes.",
    },
    {
      name: '--aicore_num',
      desc: "Set aicore num",
    },
    {
      name: '--virtual_type',
      desc: "This parameter is only supported on Ascend 310P-Series.Enable virtualization. 0(default): disable; 1: enable",
    },
    {
      name: '--out_nodes',
      desc: "Output nodes designated by users. Separate multiple nodes with semicolons (;).Use double quotation marks (\") to enclose each argument.\n
                  E.g.: \"node_name1:0;node_name1:1;node_name2:0\"",
    },
    {
      name: '--input_fp16_nodes',
      desc: "Input node datatype is fp16. Separate multiple nodes with semicolons (;). Use double quotation marks (\") to enclose each argument. E.g.: \"node_name1;node_name2\""
    },
    {
      name: '--insert_op_conf',
      desc: "Config file to insert new op",
    },
    {
      name: '--op_name_map',
      desc: "Custom op name mapping file. Note: A semicolon(;) cannot be included in each path, otherwise the resolved path will not match the expected one.",
    },
    {
      name: '--is_input_adjust_hw_layout',
      desc: "Intput node datatype is fp16 and format is NC1HWC0, used with input_fp16_nodes. E.g.: \"true,true,false,true\"",
    },
    {
      name: '--is_output_adjust_hw_layout',
      desc: "Net output node datatype is fp16 and format is NC1HWC0, used with out_nodes. E.g.: \"true,true,false,true\"",
    },
    {
      name: '--disable_reuse_memory',
      desc: "The switch of reuse memory. Default value is : 0. 0 means reuse memory, 1 means do not reuse memory.",
    },
  {
    name: '--fusion_switch_file',
    desc: 'Set fusion switch file path'
  },
  {
    name: '--enable_scope_fusion_passes',
    desc: "Validate the non-general scope fusion passes, multiple names can be set and separated by ','. E.g.: ScopePass1,ScopePass2,...."
  },
  {
    name: '--enable_single_stream',
    desc: 'Enable single stream. true: enable; false(default): disable',
  },
  {
    name: '--enable_small_channel',
    desc: 'Set enable small channel. 0(default): disable; 1: enable',
  },
  {
    name: '--enable_compress_weight',
    desc: 'Enable compress weight. true: enable; false(default): disable'
  },
  {
    name: '--compress_weight_conf',
    desc: 'Config file to compress weight.'
  },
  {
    name: '--buffer_optimize',
    desc: 'Set buffer optimize. "l2_optimize" (default) or "l1_optimize". Set "off_optimize" to close.'
  },
  {
    name: '--compression_optimize_conf',
    desc: 'Config file to compress optimize.'
  },
  {
    name: '--sparsity',
    desc: 'Optional; enable structured sparse. 0(default): disable; 1: enable'
  },
  {
    name: '--Fnonhomo_split',
    desc: 'Subgraph nonhomogenous split optimization.'
  },
  {
    name: '--precision_mode',
    desc: 'Precision mode, support force_fp16(default), allow_mix_precision, allow_fp32_to_fp16, must_keep_origin_dtype.'
  },
  {
    name: '--op_select_implmode',
    desc: 'Set op select implmode. Support high_precision, high_performance.default: high_performance.'
  },
  {
    name: '--optypelist_for_implmode',
    desc: 'Appoint which op to select implmode, cooperated with op_select_implmode. Separate 
    multiple nodes with commas (,). Use double quotation marks (") to enclose each argument. 
    E.g.: "node_name1,node_name2".'
  },
  {
    name: '--op_precision_mode',
    desc: 'Set the path of operator precision mode configuration file (.ini).'
  },
  {
    name: '--modify_mixlist',
    desc: 'Set the path of operator mixed precision configuration file.'
  },
  {
    name: '--keep_dtype',
    desc: 'Retains the precision of certain operators in inference scenarios, by using a configuration file.'
  },
  {
    name: '--customize_dtypes',
    desc: 'Set the path of custom dtypes configuration file.'
  },
  {
    name: '--op_debug_level',
    desc: "Debug enable for TBE operator building.\n
    0 (default): Disable debug;\n
    1: Enable TBE pipe_all, and generate the operator CCE file and Python-CCE mapping file (.json);\n
    2: Enable TBE pipe_all, generate the operator CCE file and Python-CCE mapping file (.json), and enable the CCE compiler -O0-g.\n
    3: Disable debug, and keep generating kernel file (.o and .json).\n
    4: Disable debug, keep generation kernel file (.o and .json) and generate the operator CCE file (.cce) and the UB fusion computing description file (.json)"
  },
  {
    name: '--tune_ops_file',
    desc: 'Specify some operators for tuning in the configuration file.'
  },
  {
    name: '--Fdeeper_opat',
    desc: 'Operator deeper optimization.'
  },
  {
    name: '--Fop_format',
    desc: 'Operator format tuning.'
  },
  {
    name: '--log',
    desc: 'Generate log with level. Support debug, info, warning, error, null.'
  }
]